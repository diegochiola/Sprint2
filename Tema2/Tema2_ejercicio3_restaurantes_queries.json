1.Escribe una consulta para mostrar todos los documentos en la colección Restaurantes.
db.restaurant.find().pretty()
2.Escribe una consulta para mostrar el restaurante_id, name, borough y cuisine de todos los documentos en la colección Restaurantes.
db.restaurant.find({},{_id: 1, name: 1, borough: 1, cuisine: 1}).pretty()
3.Escribe una consulta para mostrar el restaurante_id, name, borough y cuisine, pero excluyendo el campo _id por todos los documentos en la colección Restaurantes.
db.restaurant.find({},{_id: 0,restaurant_id:1, name: 1, borough: 1, cuisine: 1}).pretty()
4.Escribe una consulta para mostrar restaurant_id, name, borough y zip code, pero excluyendo el campo _id por todos los documentos en la colección Restaurantes.
db.restaurant.find({ "address.zipcode": { $exists: true } },{_id: 0,restaurant_id:1, name: 1, borough: 1, "adress.zipcode": 1}).pretty()
5.Escribe una consulta para mostrar todos los restaurantes que están en el Bronx.
db.restaurant.find({"borough": "Bronx" },{_id: 0,restaurant_id:1, name: 1, borough: 1, "adress.zipcode": 1}).pretty()
6.Escribe una consulta para mostrar los primeros 5 restaurantes que están en el Bronx.
db.restaurant.find({"borough": "Bronx" },{_id: 0,restaurant_id:1, name: 1, borough: 1, "adress.zipcode": 1}).pretty().limit(5)
7.Escribe una consulta para mostrar los 5 restaurantes después de saltar los primeros 5 que sean del Bronx.
db.restaurant.find({"borough": "Bronx" },{_id: 0,restaurant_id:1, name: 1, borough: 1, "adress.zipcode": 1}).pretty().skip(5).limit(5)
8.Escribe una consulta para encontrar los restaurantes que tienen algún resultado mayor de 90.
db.restaurant.find({"grades.score": {$gt: 90}}).pretty()
9.Escribe una consulta para encontrar los restaurantes que tienen un resultado mayor que 80 pero menos que 100.
db.restaurant.find({"grades.score": {$gt: 80, $lte: 100}}).pretty()
10.Escribe una consulta para encontrar los restaurantes situados en una longitud inferior a -95.754168.
db.restaurant.find({"address.coord": {$lte: -95.754168}}).pretty()
11.Escribe una consulta de MongoDB para encontrar los restaurantes que no cocinan comida 'American' y tienen algún resultado superior a 70 y latitud inferior a -65.754168.
db.restaurant.find({$and: [{ "cuisine": { $ne: 'American' } },{ "grades.score": { $gt: 70 } },{ "address.coord.1": { $lt: -65.754168 } } ]}).pretty()
12.Escribe una consulta para encontrar los restaurantes que no preparan comida 'American' y tienen algún resultado superior a 70 y que, además, se localizan en longitudes inferiores a -65.754168. Nota: Realiza esta consulta sin utilizar operador $and.
db.restaurant.find({"cuisine": {$ne:'American'},"grades.score": { $gt: 70 },"address.coord.0": { $lt: -65.754168 }}).pretty()
13.Escribe una consulta para encontrar los restaurantes que no preparan comida 'American', tienen alguna nota 'A' y no pertenecen a Brooklyn. Se debe mostrar el documento según la cuisine en orden descendente.
db.restaurant.find({"cuisine": {$ne:'American'},"grades.grade": 'A',"borough":{$ne:"Brooklyn"}}).sort({"cusine":-1}).pretty()
14.Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que contienen 'Wil' en las tres primeras letras en su nombre.
db.restaurant.find({"name": { $regex: /^Wil/i }}, {restaurante_id:1, name:1, borough:1,cuisine:1}).pretty()
15.Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que contienen 'ces' en las últimas tres letras en su nombre.
db.restaurant.find({"name": { $regex: /ces$/i }}, {restaurante_id:1, name:1, borough:1,cuisine:1}).pretty()
16.Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que contienen 'Reg' en cualquier lugar de su nombre.
db.restaurant.find({"name": { $regex: /.*Reg.*/i }}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1}).pretty()
17.Escribe una consulta para encontrar los restaurantes que pertenecen al Bronx y preparan platos americanos o chinos.
db.restaurant.find({$and:[{ "borough": "Bronx" },{ $or:[{ "cuisine": "American" },{ "cuisine": "Chinese"}]}]}).pretty()
18.Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que pertenecen a Staten Island, Queens, Bronx o Brooklyn.
db.restaurant.find({"name": { $regex: /^Wil/i }}, {restaurant_id:1, name:1, borough:1,cuisine:1}).pretty()
19.Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que pertenecen a Staten Island, Queens, Bronx o Brooklyn.
db.restaurant.find({$nor:[{ "borough":'Staten Island'},{ "borough":'Queens'},{ "borough":'Bronx'},{"borough":'Brooklyn'}]}, {restaurant_id:1, name:1, borough:1,cuisine:1}).pretty()
20.Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que consigan una nota menor que 10.
db.restaurant.find({ "grades.score":{$lt:10}}, {restaurant_id:1, name:1, borough:1,cuisine:1}).pretty()
21.Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que preparan marisco ('seafood') excepto si son 'American', 'Chinese' o el name del restaurante comienza con letras 'Wil'.
db.restaurant.find({$and:[{ cuisine: "Seafood" },{$nor:[{ cuisine: "American" },{ cuisine: "Chinese" },{ name: { $regex: /^Wil/i } }]}]},{ restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }).pretty()
22.Escribe una consulta para encontrar el restaurante_id, name y gradas para aquellos restaurantes que consigan un grade de "A" y un resultado de 11 con un ISODate "2014-08-11T00:00:00Z".
db.restaurant.find({$and:[{"grades.grade":'A'}, {"grades.score":11},{"grades.date":{$eq:ISODate("2014-08-11T00:00:00Z")}}]},{restaurant_id: 1, name: 1, "grades.grade": 1 }).pretty()
23.Escribe una consulta para encontrar el restaurante_id, name y gradas para aquellos restaurantes donde el 2º elemento del array de grados contiene un grade de "A" y un score 9 con un ISODate "2014-08-11T00:00:00Z" .
db.restaurant.find({"grades.1.grade":'A',"grades.1.score":9,"grades.1.date":ISODate("2014-08-11T00:00:00Z")},{restaurant_id: 1, name: 1, "grades.grade": 1 }).pretty()
24.Escribe una consulta para encontrar el restaurante_id, name, dirección y ubicación geográfica para aquellos restaurantes donde el segundo elemento del array coord contiene un valor entre 42 y 52.
db.restaurant.find({"address.coord.1": {$gt: 42,$lte: 52}},{restaurant_id: 1, name: 1, "address": 1 }).pretty()
25.Escribe una consulta para organizar los restaurantes por nombre en orden ascendente.
db.restaurant.find().sort({name: 1}).pretty()
26.Escribe una consulta para organizar los restaurantes por nombre en orden descendente.
db.restaurant.find().sort({name: -1}).pretty()
27.Escribe una consulta para organizar los restaurantes por el nombre de la cuisine en orden ascendente y por el barrio en orden descendente.
db.restaurant.find().sort({cuisine: 1},{borough: -1}).pretty()
28.Escribe una consulta para saber si las direcciones contienen la calle.
db.restaurant.find({"address.street": "Morris Park Ave"}).pretty()
29.Escribe una consulta que seleccione todos los documentos en la colección de restaurantes donde los valores del campo coord es de tipo Double.
db.restaurant.find({"address.coord": {$type: 1}}).pretty()
30.Escribe una consulta que seleccione el restaurante_id, name y grade para aquellos restaurantes que devuelven 0 como residuo después de dividir alguno de sus resultados por 7.
db.restaurant.find({"grades.score":{$mod:[7,0]}},{restaurant_id: 1, name: 1, "grades.grade": 1 }).pretty()
31.Escribe una consulta para encontrar el name de restaurante, borough, longitud, latitud y cuisine para aquellos restaurantes que contienen 'mon' en algún lugar de su name.
db.restaurant.find({name:{ $regex: /.*mon.*/i}},{name: 1, borough: 1, "address.coord.0":1, "address.coord.1":1 ,cuisine:1}).pretty()
32.Escribe una consulta para encontrar el name de restaurante, borough, longitud, latitud y cuisine para aquellos restaurantes que contienen 'Mad' como primeras tres letras de su name.
db.restaurant.find({name:{ $regex: /^Mad/i}},{name: 1, borough: 1, "address.coord.0":1, "address.coord.1":1 ,cuisine:1}).pretty()
